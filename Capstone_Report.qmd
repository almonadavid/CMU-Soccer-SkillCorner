---
title: "Forced Turnover: Evaluating Pressing Effectiveness in Soccer"
author:
  - David Almona, Centre College
  - Natalie Rayce, Carnegie Mellon University
date: "July 25, 2025"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
---

---

```{r}
library(tidyverse)
library(data.table)
```

## Introduction 

Soccer is a highly tactical sport where defensive tactics not only prevent the opposing team from scoring but can create immediate attacking opportunities. Pressing, a defensive tactic where opposing players apply coordinated pressure on the offensive ball carrier to force turnovers, has been at the core of elite teams like Liverpool under Jürgen Klopp and Manchester City under Pep Guardiola (commonly known as “gegenpressing”). They have shown that effective pressing can turn defense into goal-scoring opportunities within seconds.

This study centers around the question: Can the effectiveness of a press in soccer be predicted using factors such as spatial context, pressing dynamics, game context, and situational factors? We have defined our measure of effectiveness as forcing a turnover within 5 seconds of pressing initiation.


## Data

Match information, dynamic events, and XY tracking data are provided by SkillCorner. They use artificial intelligence and deep learning to detect moving objects in broadcast videos and extract data. Match information includes the data and time of the games, home and away team names, pitch dimensions, referee information, and other game-level details. Dynamic events include on-ball and off-ball activities such as passes, shots, tackles, recoveries, off-ball runs, goals, and many others. Each event also has a timestamp, location coordinates, and player identification. XY tracking data includes the identities, locations, and movements of all 22 players and the ball throughout the full 90 minutes at a rate of 10 frames per second (10 Hz). Since this data is extracted from broadcast video, SkillCorner uses its technology to extrapolate the coordinates of players outside of the camera’s field of view.

The dataset contains 520 matches played in the 2023 season of Major League Soccer (MLS), the professional soccer league in North America. The dynamic events for 18 of the 520 matches were not provided by SkillCorner because they did not pass their quality check and were, therefore, unusable for this analysis. 


## Methods

### Data processing

Using the XY tracking data, we calculated the frame-by-frame distance, velocity, acceleration, and direction of both the players and the ball. These velocities were smoothed using a rolling function with a window size of 3 frames, and the accelerations with a window size of 5 frames. Afterwards, we removed the physically impossible values, such as velocity values larger than 11.9 m/s and acceleration values larger than 10 m/s^2^. 
We also standardized the data such that the home team always attacks from left to right. **[...insert citation (CDF)...](http://example.com/)** (link embed works)

### Detecting pressing sequences with XY tracking data

While StatsBomb-360 data and possibly other soccer tracking providers tag a pressure or pressing event, SkillCorner does not. To identify pressing events, we initially defined the “pressure zone” as any area within 6 meters of the ball carrier. However, according to **[Andrienko et al., 2017]**, this approach is too simplistic and does not account for the directions players are facing or moving towards. So, we chose to adopt the new approach they had proposed, where the “pressure zone” is elliptical (or oval) rather than circular. The distance limits are determined by the following formula:

$$
L = D_{back} + (D_{front} - D_{back})(z^3 + 0.3z) / 1.3 
$$
where:

$L$ = the maximum distance limit for effective pressure at angle $\theta$ (the radius of the oval-shaped pressure zone at any given angle)

$D_{back}$ = the maximum distance limit when the presser is positioned behind the ball carrier

$D_{front}$ = the maximum distance limit when the presser is positioned in front of the ball carrier

$z$ = $(1 - cos \theta) / 2$

$\theta$ = the angle between the vector from the ball carrier to the center of the attacking goal (which we determined as the threat direction) and the vector from the ball carrier to the presser


[Andrienko et al., 2017] determined the distance thresholds $D_{back}$ and $D_{front}$ to be 3m and 9m, respectively, based on consultation with football (soccer) experts. He later performed an experiment to verify these parameters.
```{r pressure-zone-plot}
#| fig-width: 14
#| fig-height: 6
#| fig.align: "center"
#| fig-cap: "Figure [x]: The pressure zone. Left panel shows our initial circular pressure zone approach. Right panel shows the oval pressure zone method from Andrienko et al. (2017), which accounts for directional threat. The shaded blue area is where defending players would be considered as applying pressure to the ball carrier."


library(ggtext)
library(ggforce)
library(patchwork)

Dfront <- 9
Dback <- 3
n_points <- 360

# Create oval coordinates
angles <- seq(0, 2*pi, length.out = n_points)
formula_angles <- angles + pi
z <- (1 - cos(formula_angles)) / 2
L <- Dback + (Dfront - Dback) * (z^3 + 0.3 * z) / 1.3
x <- L * cos(angles)
y <- L * sin(angles)

oval_coords <- data.table(x = x, y = y)

oval_plot <- ggplot() +
  geom_polygon(data = oval_coords, aes(x = x, y = y), 
               fill = "lightblue", alpha = 0.3, color = "blue", linewidth = 1) +
  geom_point(aes(x = 0, y = 0), color = "red", size = 4) +
  geom_richtext(aes(x = 0, y = 0.5), 
                label = "Pressure target<br>(ball carrier)", 
                color = "red", size = 3.5, fontface = "bold", 
                fill = NA, label.color = NA, vjust = 0) +
  geom_segment(aes(x = 0, y = 0, xend = 12, yend = 0), 
               arrow = arrow(length = unit(0.3, "cm")), 
               color = "darkgreen", linewidth = 1.2) +
  geom_text(aes(x = 12, y = 1), label = "To Goal", hjust = 1, size = 4, color = "darkgreen") +
  geom_segment(aes(x = 0, y = 0, xend = 9, yend = 0), color = "orange", linetype = "dashed", linewidth = 0.8) +
  geom_segment(aes(x = 0, y = 0, xend = -3, yend = 0), color = "purple", linetype = "dashed", linewidth = 0.8) +
  coord_equal() +
  xlim(-10, 12) +
  ylim(-7, 7) +
  labs(x = "Distance (m)", y = NULL) +
  theme_bw()



circle_plot <- ggplot() +
  geom_circle(aes(x0 = 0, y0 = 0, r = 6), 
              fill = "lightblue", alpha = 0.3, color = "blue", linewidth = 1) +
  geom_point(aes(x = 0, y = 0), color = "red", size = 4) +
  geom_richtext(aes(x = 0, y = 0.5), 
                label = "Pressure target<br>(ball carrier)", 
                color = "red", size = 3.5, fontface = "bold", 
                fill = NA, label.color = NA, vjust = 0) +
  geom_segment(aes(x = 0, y = 0, xend = 12, yend = 0), 
               arrow = arrow(length = unit(0.3, "cm")), 
               color = "darkgreen", linewidth = 1.2) +
  geom_text(aes(x = 12, y = 1), label = "To Goal", hjust = 1, size = 4, color = "darkgreen") +
  coord_equal() +
  xlim(-10, 12) +
  ylim(-7, 7) +
  labs(x = "Distance (m)", y = "Distance (m)") +
  theme_bw()


circle_plot + oval_plot + plot_layout(ncol = 2)
```
Now that we have determined the pressure zone, the only other criterion we specified was that the approach velocity of the defender to the ball carrier must be greater than 1 m/s, as proposed by **[...cite Measuring the Eﬀectiveness…]**. This approach velocity threshold has been set in place to filter out “static” defending/pressing, as the defender must actively engage or move towards the ball carrier even if within the pressure zone. To reiterate, a defending player was classified as "pressing" if they were simultaneously within the oval pressure zone and approaching the ball carrier above the velocity threshold.

### Grouping pressing sequences

Individual pressing actions were grouped into pressing sequences based on how close they happened in time. We defined a pressing sequence as a continuous period where at least one defender from the same team maintained pressing behavior, allowing for brief interruptions of up to 1.5 seconds (15 frames). In other words, if a pressing defender leaves the pressure zone or is no longer actively pressing, but another defender exhibits pressing behavior within 1.5 seconds, the sequence remains active. However, if the next press begins more than 1.5 seconds after the previous press, a new pressing sequence begins.

For each identified sequence, we extracted the sequence duration (in frames and seconds), the number of defending players involved, and the average approach velocity of pressing defenders at the sequence start. 252,646 pressing sequences were identified.

```{r heatmap}
#| fig-width: 10
#| fig-height: 4
#| fig.align: "center"
#| fig-cap: "Figure [x]: Heatmap showing the pressing patterns across the MLS 2023 season. The highest concentration of pressing occurs in the middle third of the field on both sides, where teams look to win the ball back in midfield areas to create quick attacking opportunities. Note: the home team is made to always attack left-to-right, the away team goes right-to-left."

library(magick)

heatmap <- image_read("Visualizations/season_press_heatmap.png") |> 
  image_ggplot(interpolate = TRUE)

heatmap
```


### Measuring an effective press

Since the goal of pressing is to regain ball possession or force a turnover by the attacking team, **[Lee et al., 2025]** highlighted that the impact of pressing should extend beyond immediate ball possession. This is mainly because pressing can force the attacking team into tight positions, which may increase the likelihood of an eventual turnover in the next few seconds or actions. They tested different success criteria for pressing, such as regaining possession after 7 seconds or after 4 actions, among others, but their analysis focused on regaining possession within 5 seconds of the pressing initiation. As a result, we decided to use the same method and assess the effectiveness of a pressing sequence based on whether the pressing team forced a turnover within 5 seconds of the start of the pressing sequence.

### Feature engineering

After data cleaning and processing, we had 31 features that were used for training our model. These included:

* Spatial Context: Ball carrier position, distance to boundaries, field third, etc.
* Pressing Dynamics: Number of defenders, approach velocity, passing options, etc.
* Game Context: Score, game state (winning/losing/drawing), time remaining, etc.
* Situational Factors: How the ball carrier gained possession (pass reception, interception, etc.), incoming pass characteristics (distance, height, range), etc.
		
These features were extracted from already tagged events provided by SkillCorner and from processing the XY tracking data. Further details on the features are provided in **Appendix [x]**.

## Analysis

To reiterate, 252,464 pressing sequences were identified across the 502 MLS matches. After explicitly handling missing values within some of the features, we built and compared the performances of two models to predict forced turnovers within 5 seconds of pressing initiation: a logistic regression as a baseline and an XGBoost model. We used 10-fold cross-validation with match-based splits to prevent data leakage, making sure that no observations from the same match appeared in both training and test sets. To reduce computational load, hyperparameter tuning was done on a 10% stratified sample of the data to find the best XGBoost parameters.


##### <u>Model Performance</u>

The XGBoost model marginally outperformed the logistic regression model across all evaluation metrics, as seen in ***Table [x]***.

```{r model-summary}
#| fig-width: 3.5
#| fig-asp: 0.6
#| fig.align: "center"
#| fig-cap: "Table [x]"

library(magick)

model_sum <- image_read("Visualizations/model_summary.png") |> 
  image_ggplot(interpolate = TRUE)

model_sum
```


##### <u>Model Calibration</u>

***Figure X*** shows the calibration plot of our XGBoost model, plotting predicted turnover probabilities against actual turnover rates. In a perfectly calibrated model, the blue line, which is our model, should align exactly with the red dotted diagonal line (perfect calibration).

Our model shows reasonably good calibration overall, with some deviation from perfect. This tells us that our XGBoost model is better at predicting when turnovers are unlikely to occur than when they are likely to occur.

```{r calibration-plot}
#| fig-width: 10
#| fig-asp: 0.6
#| fig.align: "center"
#| fig-cap: "Figure [x]: Calibration plot"

library(magick)

calib_plot <- image_read("Visualizations/calibration_plot.png") |> 
  image_ggplot(interpolate = TRUE)

calib_plot
```

## Results

##### <u>Team Pressing Performane</u>
Significant variation existed in pressing effectiveness across MLS teams during the 2023 season (***Figure [X]***). Based on our model, the New York Red Bulls were the most effective pressing team, forcing approximately 7 more turnovers per game than our model predicted. 

```{r diverge-plot}
#| fig-width: 10
#| fig-asp: 0.6
#| fig.align: "center"
#| fig-cap: "Figure [x]: Positive values (blue) indicate teams forcing more turnovers than predicted, while negative values (red) show underperformance. New York Red Bulls led MLS in pressing effectiveness, while Nashville SC struggled most relative to expectations."

library(magick)

diverg_plot <- image_read("Visualizations/diverging_plot.png") |> 
  image_ggplot(interpolate = TRUE)

diverg_plot
```


##### <u>Pressing Volume vs. Pressing Effectiveness</u>
***Figure [X]*** shows pressing volume against pressing effectiveness by teams with four quadrants: high-volume/high-effectiveness (top right), low-volume/high-effectiveness (top left), high-volume/low-effectiveness (bottom right), and low-volume/low-effectiveness (bottom left). The New York Red Bulls represented the ideal combination, attempting the most presses per game while maintaining the highest effectiveness. 

```{r volume-effectiveness}
#| fig-width: 10
#| fig-asp: 0.6
#| fig.align: "center"
#| fig-cap: "Figure [x]: Teams in the upper-right quadrant combine high pressing frequency with high effectiveness"

library(magick)

ve_plot <- image_read("Visualizations/volume_vs_effectiveness_plot.png") |> 
  image_ggplot(interpolate = TRUE)

ve_plot
```

##### <u>When pressing vs. when being pressed</u>
change from 3# in methods to underline and 4#
*[enter text]*








## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix: A quick tutorial

**(Feel free to remove this section when you submit)**

This a Quarto document. 
To learn more about Quarto see <https://quarto.org>.
You can use the Render button to see what it looks like in HTML.

### Text formatting

Text can be bolded with **double asterisks** and italicized with *single asterisks*. 
Monospace text, such as for short code snippets, uses `backticks`.
(Note these are different from quotation marks or apostrophes.) Links are
written [like this](http://example.com/).

Bulleted lists can be written with asterisks:

* Each item starts on a new line with an asterisk.
* Items should start on the beginning of the line.
* Leave blank lines after the end of the list so the list does not continue.

Mathematics can be written with LaTeX syntax using dollar signs. 
For instance, using single dollar signs we can write inline math: $(-b \pm \sqrt{b^2 - 4ac})/2a$.

To write math in "display style", i.e. displayed on its own line centered on the
page, we use double dollar signs:
$$
x^2 + y^2 = 1
$$


### Code blocks

Code blocks are evaluated sequentially when you hit Render. 
As the code runs, `R` prints out which block is running, so naming blocks is useful if you want to know which one takes a long time. 
After the block name, you can specify [chunk options](https://yihui.org/knitr/options/). 
For example, `echo` controls whether the code is printed in the document. 
By default, output is printed in the document in monospace:

```{r, echo = FALSE}
head(mtcars)
```

Chunk options can also be written inside the code block, which is helpful for really long options, as we'll see soon.

```{r}
#| echo: false
head(mtcars)
```

### Figures

If a code block produces a plot or figure, this figure will automatically be inserted inline in the report. That is, it will be inserted exactly where the code block is.

```{r}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This is a caption. It should explain what's in the figure and what's interesting about it. For instance: There is a negative, strong linear correlation between miles per gallon and horsepower for US cars in the 1970s."

library(tidyverse)
mtcars |> 
  ggplot(aes(x = mpg, y = hp)) +
  geom_point() +
  labs(x = "Miles per gallon",
       y = "Horsepower")
```

Notice the use of `fig-width` and `fig-height` to control the figure's size (in inches). 
These control the sizes given to `R` when it generates the plot, so `R` proportionally adjusts the font sizes to be large enough.

### Tables

Use the `knitr::kable()` function to print tables as HTML:

```{r}
mtcars |> 
  slice(1:5) |> 
  knitr::kable()
```

We can summarize model results with a table. 
For instance, suppose we fit a linear regression model:

```{r}
#| echo: true
model1 <- lm(mpg ~ disp + hp + drat, data = mtcars)
```

It is *not* appropriate to simply print `summary(model1)` into the report. 
If we want the reader to understand what models we have fit and what their results are, we should provide a nicely formatted table. 
A simple option is to use the `tidy()` function from the `broom` package to get a data frame of the model fit, and simply report that as a table.

```{r }
#| results: "asis"
#| tbl-cap: "Predicting fuel economy using vehicle features."
library(broom)
model1 |> 
  tidy() |>
  knitr::kable(digits = 2,
               col.names = c("Term", "Estimate", "SE", "t", "p"))
```
