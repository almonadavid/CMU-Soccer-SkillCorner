---
title: "Forced Turnover:<br>Evaluating Pressing Effectiveness in Soccer"
author: Natalie Rayce, David Almona
editor: visual
format:
  revealjs:
    slide-number: true
    embed-resources: true
    preview-links: auto
    # transition: slide
    # smaller: true
---

## Definitions

::: fragment
**Pressing:** a defensive tactic where players apply coordinated pressure on the opponent with the ball to force mistakes, win back possession, and quickly transition to attack
:::

::: fragment
**Forced Turnover:** when a player loses possession due to opponent pressure, resulting in the opposing team gaining control. This includes misplaced passes, interceptions, successful tackles, or losing control under pressure - all direct results of effective defensive pressure
:::

## Data Overview

::: fragment
-   **Dataset:** 521 matches in the MLS 2023 season
:::

::: fragment
-   **Source:** SkillCorner
:::

::: fragment
-   **Three data types:**
    -   **Match information:** game details (teams, pitch, referee)
    -   **Event data:** player actions (passes, shots, tackles) with timestamps and coordinates
    -   **Tracking data:** real-time positions of all players and ball (10 Hz)
:::

## Methods

::: fragment
-   Standardized the tracking data, such that home team always attacks left-to-right
:::

::: fragment
-   Calculated frame-by-frame distance, speed, acceleration, and direction for every player on the field
:::

::: fragment
-   Identified the ball carrier for each frame using the events data and measured how fast defenders were moving toward the ball carrier
:::

## Methods: Press detection

Our pressing criteria required defenders to meet two conditions:

::: fragment
-   Be within **6 meters** of the ball carrier, **AND**
-   Either be approaching at more than 1.0 meters per second OR show close engagement behaviors
:::

## The Modeling Data

::: fragment
-   **4,875 pressing sequences** identified across the first 10 MLS matches
:::

::: fragment
-   **27 features** capturing tactical, spatial, and temporal contexts
:::

::: fragment
-   **Target Variable:** Forced turnover within 5 seconds of press sequence start (binary)
:::

## Key Variables

::: fragment
-   **Spatial Context:** Ball carrier position, distance to boundaries, field third
:::

::: fragment
-   **Pressing Dynamics:** Number of defenders, approach velocity, passing options
:::

::: fragment
-   **Game Context:** Score, game state (winning/losing/drawing), time remaining
:::

::: fragment
-   **Situational Factors:** How ball carrier gained possession (pass reception, interception, etc.), incoming pass characteristics (distance, height, range)
:::

## Results

::: fragment
-   **Model:** XGBoost, with 10-fold cross validation
-   **Accuracy:** 82.1%
-   **ROC-AUC:** 0.782
:::

::: fragment
**Confusion Matrix:**

```{r}
#| label: confusion-matrix
#| echo: false
#| warning: false
#| message: false

library(tidymodels)
library(knitr)

final_res <- readRDS("final_results.rds")

# Create confusion matrix
cm <- final_res |> 
  collect_predictions() |> 
  conf_mat(forced_turnover_within_5s, .pred_class)

# Display table
cm$table |> 
  kable()
```
:::

## Results: Variable Importance

```{r}
#| label: variable-importance
#| echo: false
#| warning: false
#| message: false
#| fig-width: 10
#| fig-height: 6

library(vip)

final_xgb <- readRDS("final_model.rds")
pressing_train <- readRDS("pressing_train.rds")

final_xgb |> 
  fit(data = pressing_train) |> 
  extract_fit_parsnip() |> 
  vip() +
  theme_light(base_size = 18)
```

## Results: ROC Curve

```{r}
#| label: roc-curve
#| echo: false
#| warning: false
#| message: false


final_res <- readRDS("final_results.rds")

final_res |> 
  collect_predictions() |> 
  roc_curve(forced_turnover_within_5s, .pred_FALSE) |> 
  autoplot() +
  theme_light(base_size = 18)
```

## Limitations

::: fragment
-   Inaccuracy in SkillCorner data
-   Individual player skill and tactical tendencies not considered in the model
-   Our model does not account for pitch control
:::


## Next Steps

::: fragment
1. Use an elliptical (or oval) pressure zone rather than a circular one.


```{r}
library(magick)
#| label: fig-plot
#| include: TRUE
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| fig.width: 24
#| fig.height: 16
#| fig.cap: "plot"

# save image as ggplot
my_plot_ggplot <- image_read("pressure_zone.png") %>% 
  image_ggplot(interpolate = TRUE)
my_plot_ggplot
```

:::

## Next Steps

2. Compare the expected pressure difference from individuals and teams on a scatterplot.

## Next Steps

3. Now that we have an XGBoost model, we plan to compare it with other models, e.g random forest, lightGBM.

```{r}
library(magick)
#| label: fig-plot
#| include: TRUE
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| fig.width: 24
#| fig.height: 16

# save image as ggplot
my_plot_ggplot <- image_read("pressure_plot.png") %>% 
  image_ggplot(interpolate = TRUE)
my_plot_ggplot
```

##


## Appendix

```{r}
#| label: appendix
#| include: TRUE
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE

library(tidyverse)
library(data.table)
library(ggplot2)

# Load Data
pressing_data <- read_csv("C:/Users/almon/OneDrive - Centre College of Kentucky/Desktop/CMSACamp/Capstone/CMU-Soccer-SkillCorner/Almona/results/all_games_pressing_sequences.csv") |>
  filter( # remove coordinates outside field boundaries
    between(ball_carrier_x, -52.5, 52.5),
    between(ball_carrier_y, -34, 34)
  ) |> 
  select(-match_id:-player_in_possession_name, -game_id) |>
  mutate_if(is.character, as.factor) |> 
  mutate_if(is.logical, as.factor) |> 
  as.data.table()
  
ggplot(pressing_data, aes(start_type, fill = forced_turnover_within_5s)) +
  geom_bar(position = "fill") +
  coord_flip() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_light()
```


## 

