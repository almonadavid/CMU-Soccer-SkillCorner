library(tidyverse)
library(data.table)
library(jsonlite)
library(gganimate)



################################################################
##        PSA: Run eda_functions.R before proceeding          ##
################################################################



################################################################
##              Exploratory Data Analysis (EDA)               ##
################################################################


#### Get Team Information ####
home_team_name <- match_info$home_team$name
away_team_name <- match_info$away_team$name

print(paste("Home Team:", home_team_name))
print(paste("Away Team:", away_team_name))


#### Get the lineups for each team ####
home_team_id <- match_info_df$home_team$id
away_team_id <- match_info_df$away_team$id

home_players <- players_info[players_info$team_id == home_team_id, ]
away_players <- players_info[players_info$team_id == away_team_id, ]

# Home team lineup
home_lineup <- home_players[, `:=` (
  Name = first_name,
  Surname = last_name,
  Role = player_role.acronym
)][, .(Name, Surname, Role)]

# Away team lineup
away_lineup <- away_players[, `:=` (
  Name = first_name,
  Surname = last_name,
  Role = player_role.acronym
)][, .(Name, Surname, Role)]


#### Get Referee and Pitch Information ####
referee_info <- match_info_df$referees

pitch_length <- match_info_df$pitch_length
pitch_width <- match_info_df$pitch_width
print(paste("Pitch Dimensions:", pitch_length, "m x", pitch_width, "m"))


#### Calculate distance, direction, speed, acceleration ####
tracking_data_update <- calculate_direction(tracking_data)


#### Calculating minutes played (considering VAR stoppages and extra time, represents time spent on the pitch, not necessarily game time played) ####
game_time <- calculate_minutes_played(tracking_data) |> 
  select(short_name, team_id, minutes_played)


## Calculate distance covered by each player
player_distance <- calculate_distance_covered(tracking_data_update) |> 
  select(short_name, team_id, total_distance, total_distance_km)


#### Distance covered at different speed zones ####
player_distance_category <- calculate_speed_zones(tracking_data_update) |> 
  select(short_name, player_id, team_id, distance_jogging, distance_running, 
         distance_hsr, distance_sprinting, total_distance, sustained_sprints, max_speed, avg_speed)



#### GGANIMATE ####
event_time <- "00:00:00.00"

target_frame <- tracking_data[timestamp == event_time, frame][1] # find first frame that matched event time
frames_before <- 0
frames_after <- 280
frame_range <- (target_frame - frames_before):(target_frame + frames_after)

anim_data <- tracking_data_update[frame %in% frame_range]


# Create the animated plot
p <- ggplot(data = anim_data) +
  annotate("rect",xmin = -52.5, xmax = 52.5, ymin = -34, ymax = 34, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = -52.5, xmax = 0, ymin = -34, ymax = 34, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = -52.5, xmax = -36.75, ymin = -18.7, ymax = 18.7, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = 36.75, xmax = 52.5, ymin = -18.7, ymax = 18.7, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = -52.5, xmax = -47.25, ymin = -8.5, ymax = 8.5, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = 52.5, xmax = 47.25, ymin = -8.5, ymax = 8.5, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = 52.5, xmax = 53, ymin = -3.4, ymax = 3.4, fill = NA, colour = "black", size = 0.6) +
  annotate("rect",xmin = -52.5, xmax = -53, ymin = -3.4, ymax = 3.4, fill = NA, colour = "black", size = 0.6) +
  annotate("segment", x = 0, xend = 0, y = -34.5, yend = 34.5, colour = "black", size = 0.6)+
  annotate("segment", x = -52.5, xend = -52.5, y = -34, yend = 34, colour = "black", size = 0.6)+
  annotate("segment", x = 52.5, xend = 52.5, y = -34, yend = 34, colour = "black", size = 0.6)+
  annotate("point", x = -42 , y = 0, colour = "black", size = 1.05) +
  annotate("point", x = 42 , y = 0, colour = "black", size = 1.05) +
  annotate("path", colour = "black", size = 0.6, x=0+8.75*cos(seq(0,2*pi,length.out=2000)),
           y=0+8.75*sin(seq(0,2*pi,length.out=2000))) +
  annotate("point", x = 0 , y = 0, colour = "black", size = 1.05) +
  annotate("path", x=-42+8.75*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
           y=0+8.75*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
  annotate("path", x=42-8.75*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
           y=0-8.75*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
  geom_spoke(data = anim_data[speed > 0.5],
             aes(x = x, y = y, angle = direction * pi/180,
                 radius = speed*1.2),
             arrow = arrow(length = unit(2, "mm"))) +
  geom_point(data = anim_data, aes(x = x, 
                                   y = y, 
                                   color = as.factor(team_id)), 
             size = 6, alpha = 0.9) +
  geom_text(data = anim_data, aes(x = x, y = y, label = number), 
            size = 5, color = "black") + 
  geom_point(data = anim_data, aes(x = ball_data.x, 
                                   y = ball_data.y,
                                   color = "BALL"), 
             size = 3, alpha = 0.9) +
  coord_fixed() +
  # scale_color_discrete(...) +
  # labs(...) +
  theme_void() +
  # theme(...) +
  transition_time(frame)

# Render the animation
play <- animate(p, nframes = length(frame_range), fps = 20, width = 800, height = 600)

# Display the animation
play
